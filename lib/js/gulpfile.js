const gulp = require('gulp');
const watch = require('gulp-watch');

const browserify = require('browserify');
const compass = require('gulp-compass');
const pug = require('gulp-pug');
const sass = require('gulp-sass');
const streamify = require('gulp-streamify');
const concat = require('gulp-concat');
const minify = require('gulp-minify-css');
const plumber = require('gulp-plumber');
const rename = require('gulp-rename');
const source = require('vinyl-source-stream');
const uglify = require('gulp-uglify');
const argv = require('yargs').argv;
const spawn = require('child_process').spawn;
const path = require('path');
const _ = require('lodash');
const cleanCSS = require('gulp-clean-css');
const gzip = require('gulp-gzip');
const watchify = require('gulp-watchify');
const babelify = require('babelify');

const rootPath = path.join(__dirname, './');

const jsWatch = path.join(rootPath, 'src/**/*.js');
const jsOut = path.join(rootPath, 'built');
const jsOuted = path.join(rootPath, 'built/**/index.js');
const jsPublic = path.join(rootPath, '../../public/js/');

const vendor = path.join(rootPath, 'vendor/index.js');

// 実際に使うコマンド

//// コンパイル (default に含まれる)
gulp.task('watch', ['js', 'move']);

//// ライブラリパッキング（ライセンス表記）
gulp.task('vendor', ['vendor-packing']);
//// gzipあり圧縮
gulp.task('hard', ['hard-packing']);
//// gzipなし圧縮
gulp.task('soft', ['soft-packing']);


// task

const onError = function (err) {
  console.log(err.toString());
  this.emit('end');
};

// gulpfile自体の更新時にgulpを再起動する
gulp.task('default', function () {
  let p = undefined;

  let spawnChildren = (e) => {
    p && p.kill();
    p = spawn('gulp', ['watch'], {stdio: 'inherit'});
  };

  gulp.watch('gulpfile.js', spawnChildren);
  spawnChildren(null);
});

// ライセンスを残したままでbrowserifyをかける
// 巨大ライブラリを別ファイルとしてコンパイルしておきたい時に使う

gulp.task('vendor-packing', () => {
  browserify({
    entries: [vendor],
    debug: true
  })
    .transform(babelify)
  .plugin('licensify')
  .bundle()
  .on('error', onError)
  .pipe(source('built.js'))
  .pipe(streamify(uglify({output: {comments: /generated by licensify/}})))
  .pipe(rename('common.js'))
  .pipe(gulp.dest(jsPublic));
});

// compile JavaScript ES2015

let watching = false;
gulp.task('enable-watch-mode', () => watching = true);
gulp.task('js', watchify((watchify) => {
    gulp
    .src(jsWatch)
    .pipe(watch(jsWatch))
    .pipe(watchify({
      watch: watching,
      transform: ['babelify']
    }))
    .pipe(gulp.dest(jsOut));
}));

// move compiled file

gulp.task('move', (e) => {
  gulp
    .src(jsOuted)
    .pipe(watch(jsOuted))
    .pipe(plumber())
    .pipe(gulp.dest(jsPublic));
});
